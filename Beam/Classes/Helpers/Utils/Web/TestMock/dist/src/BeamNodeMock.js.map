{"version":3,"file":"BeamNodeMock.js","sourceRoot":"","sources":["../../src/BeamNodeMock.ts"],"names":[],"mappings":";;;AAAA,+DAAyD;AACzD,6DAAoF;AAEpF,MAAa,YAAa,SAAQ,yCAAmB;IAoBnD,YAAqB,QAAgB,EAAW,QAAsB,EAAE,KAAK,GAAG,EAAE;QAChF,KAAK,EAAE,CAAA;QADY,aAAQ,GAAR,QAAQ,CAAQ;QAAW,aAAQ,GAAR,QAAQ,CAAc;QAXtE,eAAU,GAAe,EAAE,CAAA;QAG3B,gBAAW,GAAG,IAAI,CAAA;QAElB;;;WAGG;QACH,WAAM,GAAG,IAAI,2BAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;QAI/B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;QAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC1B,CAAC;IAGD,yBAAyB,CAAC,0BAA+B;QACvD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAID,WAAW,CAAC,IAAc;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;QACtB,IAAI,CAAC,aAAa,GAAG,IAA8B,CAAA;QACnD,OAAO,IAAI,CAAA;IACb,CAAC;IAED,WAAW,CAAC,EAAY;QACtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;QACxE,EAAE,CAAC,UAAU,GAAG,IAAI,CAAA;QACpB,EAAE,CAAC,aAAa,GAAG,IAAI,CAAA;IACzB,CAAC;IAED,QAAQ,CAAC,EAAY;QACnB,OAAO,IAAI,KAAK,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,KAAK,EAAE,IAAI,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAA;IACvG,CAAC;IAED,IAAI,WAAW;QACb,MAAM,gBAAgB,GAAG,CAAC,IAAc,EAAU,EAAE;YAClD,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAa,EAAE,IAAI,EAAE,EAAE;gBAC1D,IAAI,IAAI,CAAC,QAAQ,KAAK,+BAAY,CAAC,IAAI,EAAE;oBACvC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC,CAAA;iBACpB;qBAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,+BAAY,CAAC,OAAO,EAAE;oBACjD,GAAG,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAA;iBACpC;gBACD,OAAO,GAAG,CAAA;YACZ,CAAC,EAAE,EAAE,CAAC,CAAA;YACN,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QACtB,CAAC,CAAA;QACD,OAAO,gBAAgB,CAAC,IAAI,CAAC,CAAA;IAC/B,CAAC;;AAhEH,oCAiEC;AAhEiB,yBAAY,GAAG,+BAAY,CAAC,OAAO,CAAA;AACnC,sBAAS,GAAG,+BAAY,CAAC,IAAI,CAAA;AAC7B,wCAA2B,GAAG,+BAAY,CAAC,sBAAsB,CAAA;AACjE,yBAAY,GAAG,+BAAY,CAAC,OAAO,CAAA;AACnC,0BAAa,GAAG,+BAAY,CAAC,QAAQ,CAAA;AACrC,+BAAkB,GAAG,+BAAY,CAAC,aAAa,CAAA;AAC/C,mCAAsB,GAAG,+BAAY,CAAC,iBAAiB,CAAA","sourcesContent":["import {BeamEventTargetMock} from \"./BeamEventTargetMock\"\nimport {BeamElement, BeamNode, BeamNodeType, BeamRect} from \"@beam/native-beamtypes\"\n\nexport class BeamNodeMock extends BeamEventTargetMock implements BeamNode {\n  static readonly ELEMENT_NODE = BeamNodeType.element\n  static readonly TEXT_NODE = BeamNodeType.text\n  static readonly PROCESSING_INSTRUCTION_NODE = BeamNodeType.processing_instruction\n  static readonly COMMENT_NODE = BeamNodeType.comment\n  static readonly DOCUMENT_NODE = BeamNodeType.document\n  static readonly DOCUMENT_TYPE_NODE = BeamNodeType.document_type\n  static readonly DOCUMENT_FRAGMENT_NODE = BeamNodeType.document_fragment\n\n  childNodes: BeamNode[] = []\n  parentNode?: BeamNode\n  parentElement?: BeamElement\n  isConnected = true\n\n  /**\n   * @deprecated Not standard, for test purpose\n   * Relative bounds\n   */\n  bounds = new BeamRect(0, 0, 0, 0)\n\n  constructor(readonly nodeName: string, readonly nodeType: BeamNodeType, props = {}) {\n    super()\n    Object.assign(this, props)\n    this.nodeName = nodeName\n    this.nodeType = nodeType\n  }\n  muted?: boolean\n  paused?: boolean\n  webkitSetPresentationMode(BeamWebkitPresentationMode: any) {\n    throw new Error(\"Method not implemented.\")\n  }\n  offsetHeight: number\n  offsetWidth: number\n\n  appendChild(node: BeamNode): BeamNode {\n    this.childNodes.push(node)\n    node.parentNode = this\n    node.parentElement = this as unknown as BeamElement\n    return node\n  }\n\n  removeChild(el: BeamNode) {\n    this.childNodes = this.childNodes.splice(this.childNodes.indexOf(el), 1)\n    el.parentNode = null\n    el.parentElement = null\n  }\n\n  contains(el: BeamNode): boolean {\n    return this === el || this.childNodes.some((childNode) => childNode === el || childNode.contains(el))\n  }\n\n  get textContent(): string {\n    const collectTextNodes = (node: BeamNode): string => {\n      const text = node.childNodes.reduce((acc: string[], node) => {\n        if (node.nodeType === BeamNodeType.text) {\n          acc.push(`${node}`)\n        } else if (node.nodeType === BeamNodeType.element) {\n          acc.push(...collectTextNodes(node))\n        }\n        return acc\n      }, [])\n      return text.join(\"\")\n    }\n    return collectTextNodes(this)\n  }\n}\n"]}