{"version":3,"file":"BeamHTMLElementMock.js","sourceRoot":"","sources":["../../src/BeamHTMLElementMock.ts"],"names":[],"mappings":";;;AAAA,6DAAsF;AACtF,uDAAiD;AACjD,iDAA2C;AAE3C,MAAa,mBAAoB,SAAQ,iCAAe;IAOtD,YAAY,QAAgB,EAAE,UAAU,GAAG,EAAE;QAC3C,KAAK,CAAC,QAAQ,EAAE,IAAI,mCAAgB,CAAC,UAAU,CAAC,CAAC,CAAA;QAPnD,wBAAmB,GAAG,EAAE,CAAA;QACxB,YAAO,GAAG;YACR,WAAW,EAAE,qBAAqB;SACnC,CAAA;IAKD,CAAC;IAGD,sBAAsB,CAAC,KAAa,EAAE,OAA4B;QAChE,qCAAqC;QACrC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE;YACpC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,GAAG,EAAE,CAAA;SACrC;QACD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC/C,CAAC;IAED,gBAAgB,CAAC,KAAa;QAC5B,IAAI,KAAK,IAAI,GAAG,EAAE;YAChB,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAA;YAC5D,OAAO,EAAE,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAA;SAC5B;QAED,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAA;IAC9C,CAAC;IAED,aAAa,CAAC,KAAa;QACzB,IAAI,KAAK,IAAI,GAAG,EAAE;YAChB,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAA;YAC5D,OAAO,EAAE,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,EAAE,CAAA;SAClC;QAED,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAA;IAC9C,CAAC;IACD,eAAe,CAAC,eAAoB;QAClC,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAA;IACzC,CAAC;IAED,YAAY,CAAC,aAAqB,EAAE,KAAa;QAC/C,MAAM,IAAI,GAAG,QAAQ,CAAC,eAAe,CAAC,aAAa,CAAC,CAAA;QACpD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;IACpC,CAAC;IAED,YAAY,CAAC,aAAqB;QAChC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,aAAa,CAAC,CAAA;QACxD,OAAO,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,CAAA;IACpB,CAAC;IAID,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,WAAW,CAAA;IACzB,CAAC;IAED,IAAI,SAAS,CAAC,IAAY;QACxB,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,+BAAY,CAAC,IAAI,CAAC,CAAA;QACvF,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;SAC3B;QACD,IAAI,CAAC,WAAW,CAAC,IAAI,2BAAY,CAAC,IAAI,CAAC,CAAC,CAAA;IAC1C,CAAC;CACF;AAjED,kDAiEC","sourcesContent":["import {BeamHTMLElement, BeamNodeType, BeamNamedNodeMap} from \"@beam/native-beamtypes\"\nimport {BeamElementMock} from \"./BeamElementMock\"\nimport {BeamTextMock} from \"./BeamTextMock\"\n\nexport class BeamHTMLElementMock extends BeamElementMock implements BeamHTMLElement {\n  querySelectorResult = {}\n  dataset = {\n    \"beam-mock\": \"uuid-uuid-uuid-uuid\"\n  }\n  isConnected: boolean\n\n  constructor(nodeName: string, attributes = {}) {\n    super(nodeName, new BeamNamedNodeMap(attributes))\n  }\n  parentElement?: BeamHTMLElement\n\n  setQuerySelectorResult(query: string, element: BeamHTMLElementMock) {\n    // if no array exists yet, create one\n    if (!this.querySelectorResult[query]) {\n      this.querySelectorResult[query] = []\n    }\n    this.querySelectorResult[query].push(element)\n  }\n\n  querySelectorAll(query: string): BeamHTMLElementMock[] {\n    if (query == \"*\") {\n      const arrays = Object.values(this.querySelectorResult) || []\n      return [].concat(...arrays)\n    }\n\n    return this.querySelectorResult[query] || []\n  }\n\n  querySelector(query: string): BeamHTMLElementMock {\n    if (query == \"*\") {\n      const arrays = Object.values(this.querySelectorResult) || []\n      return [].concat(...arrays).pop()\n    }\n\n    return this.querySelectorResult[query].pop()\n  }\n  removeAttribute(pointDatasetKey: any) {\n    delete this.attributes[pointDatasetKey]\n  }\n\n  setAttribute(qualifiedName: string, value: string) {\n    const attr = document.createAttribute(qualifiedName)\n    attr.value = value\n    this.attributes.setNamedItem(attr)\n  }\n\n  getAttribute(qualifiedName: string): string {\n    const item = this.attributes.getNamedItem(qualifiedName)\n    return item?.value\n  }\n\n  nodeValue: any\n\n  get innerText(): string {\n    return this.textContent\n  }\n\n  set innerText(text: string) {\n    const textNodes = this.childNodes.filter((node) => node.nodeType === BeamNodeType.text)\n    for (const textNode of textNodes) {\n      this.removeChild(textNode)\n    }\n    this.appendChild(new BeamTextMock(text))\n  }\n}\n"]}