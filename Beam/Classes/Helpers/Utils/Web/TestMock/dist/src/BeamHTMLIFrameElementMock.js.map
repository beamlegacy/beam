{"version":3,"file":"BeamHTMLIFrameElementMock.js","sourceRoot":"","sources":["../../src/BeamHTMLIFrameElementMock.ts"],"names":[],"mappings":";;;AAEA,6DAAoE;AACpE,+DAAyD;AAEzD,MAAa,yBAA0B,SAAQ,yCAAmB;IAGhE,YAAmB,aAA8B,EAAE,aAA2B,IAAI,mCAAgB,EAAE;QAClG,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAA;QADV,kBAAa,GAAb,aAAa,CAAiB;IAEjD,CAAC;IACD,KAAK;QACH,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAKD,YAAY,CAAC,aAAqB,EAAE,KAAa;QAC/C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,YAAY,CAAC,aAAqB;QAChC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAID;;;OAGG;IACH,OAAO,CAAC,KAAa;QACnB,IAAI,CAAC,SAAS,IAAI,KAAK,CAAA;QACvB,MAAM,GAAG,GAAG,IAAI,CAAC,aAAoC,CAAA;QACrD,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,CAAA;QAClC,MAAM,WAAW,GAAG,IAAI,8BAAW,EAAE,CAAA;QACrC,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAA;QAC5C,OAAO,WAAW,CAAA;IACpB,CAAC;CACF;AAnCD,8DAmCC","sourcesContent":["import {BeamHTMLIFrameElement, BeamWindow} from \"@beam/native-beamtypes\"\nimport {BeamWindowMock} from \"./BeamWindowMock\"\nimport {BeamUIEvent, BeamNamedNodeMap} from \"@beam/native-beamtypes\"\nimport {BeamHTMLElementMock} from \"./BeamHTMLElementMock\"\n\nexport class BeamHTMLIFrameElementMock extends BeamHTMLElementMock implements BeamHTMLIFrameElement {\n  src: string\n\n  constructor(public contentWindow: BeamWindow<any>, attributes: NamedNodeMap = new BeamNamedNodeMap()) {\n    super(\"iframe\", attributes)\n  }\n  focus() {\n    throw new Error(\"Method not implemented.\")\n  }\n  srcset?: string\n  currentSrc?: string\n  id?: string\n\n  setAttribute(qualifiedName: string, value: string): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  getAttribute(qualifiedName: string): string {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  nodeValue: any\n\n  /**\n   * @param delta {number} positive or negative scroll delta\n   * @return the scroll event\n   */\n  scrollY(delta: number): BeamUIEvent {\n    this.clientTop += delta\n    const win = this.contentWindow as BeamWindowMock<any>\n    win.scroll(0, win.scrollY + delta)\n    const scrollEvent = new BeamUIEvent()\n    Object.assign(scrollEvent, {name: \"scroll\"})\n    return scrollEvent\n  }\n}\n"]}