{"version":3,"file":"BeamDocumentMock.js","sourceRoot":"","sources":["../../src/BeamDocumentMock.ts"],"names":[],"mappings":";;;AAAA,6DAO+B;AAC/B,2DAAuD;AACvD,iDAA6C;AAC7C,uDAAmD;AACnD,mDAA+C;AAC/C,+DAA2D;AAE9C,QAAA,wBAAwB,GAAG;IACtC,IAAI,EAAE;QACJ,SAAS,EAAE;YACT,KAAK,EAAE;gBACL,IAAI,EAAE,GAAG;aACV;SACF;QACD,UAAU,EAAE;YACV,WAAW,EAAE,GAAG;YAChB,YAAY,EAAE,CAAC;YACf,WAAW,EAAE,GAAG;YAChB,YAAY,EAAE,CAAC;YACf,WAAW,EAAE,GAAG;YAChB,YAAY,EAAE,CAAC;SAChB;KACF;IACD,eAAe,EAAE;QACf,WAAW,EAAE,GAAG;QAChB,YAAY,EAAE,CAAC;QACf,WAAW,EAAE,GAAG;QAChB,YAAY,EAAE,CAAC;QACf,WAAW,EAAE,GAAG;QAChB,YAAY,EAAE,CAAC;KAChB;CACF,CAAA;AAED,MAAa,cAAc;IAKzB,YAAY,IAAI,EAAE,UAAU,EAAE,MAAM;QAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IACD,UAAU;QACR,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAA;IACpC,CAAC;IACD,SAAS;QACP,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAA;IACnC,CAAC;IACD,QAAQ;QACN,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAA;IACrC,CAAC;IACD,WAAW;QACT,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAA;IACrC,CAAC;IACD,UAAU;QACR,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAA;IACpC,CAAC;IACD,YAAY;QACV,OAAO,IAAI,CAAC,WAAW,CAAC,eAAe,CAAA;IACzC,CAAC;IACD,eAAe;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,eAAe,CAAA;IACzC,CAAC;CAEF;AAjCD,wCAiCC;AAED,MAAa,gBAAiB,SAAQ,2BAAY;IAehD,YAAY,UAAU,GAAG,EAAE;QACzB,KAAK,CAAC,WAAW,EAAE,+BAAY,CAAC,QAAQ,CAAC,CAAA;QAf3C;;WAEG;QACH,oBAAe,GAAoB,IAAI,yCAAmB,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;QAanE,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;QACd,IAAI,CAAC,SAAS,GAAG,IAAI,qCAAiB,CAAC,KAAK,CAAC,CAAA;QAC7C,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,2BAAY,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAA;QAChD,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;IACjC,CAAC;IACD,gBAAgB,CAAC,IAAc,EAAE,UAAmB,EAAE,MAAmB,EAAE,uBAAiC;QAC1G,OAAO,IAAI,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,CAAC,CAAA;IACrD,CAAC;IACD,cAAc,CAAC,IAAY;QACzB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAGD,yBAAyB,CAAC,0BAA+B;QACvD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,sBAAsB;QACpB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,gBAAgB,CAAC,CAAM,EAAE,CAAM;QAC7B,OAAO,IAAI,CAAC,eAAe,CAAA;IAC7B,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,GAAG;QACf,OAAO,IAAI,iCAAe,CAAC,GAAG,CAAC,CAAA;IACjC,CAAC;IAED;;;;OAIG;IACH,gBAAgB,CAAC,SAAS,EAAE,EAAE;QAC5B,mCAAmC;IACrC,CAAC;IAED;;OAEG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,SAAS,CAAA;IACvB,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAAC,QAAQ;QACvB,OAAO,EAAE,CAAA,CAAC,kCAAkC;IAC9C,CAAC;IAED,WAAW;QACT,OAAO,IAAI,6BAAa,EAAE,CAAA;IAC5B,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,QAAQ;QACpB,OAAM;IACR,CAAC;CACF;AApFD,4CAoFC","sourcesContent":["import {\n  BeamDocument,\n  BeamHTMLElement,\n  BeamNode,\n  BeamNodeType,\n  BeamRange,\n  BeamSelection\n} from \"@beam/native-beamtypes\"\nimport { BeamSelectionMock } from \"./BeamSelectionMock\"\nimport { BeamNodeMock } from \"./BeamNodeMock\"\nimport { BeamElementMock } from \"./BeamElementMock\"\nimport { BeamRangeMock } from \"./BeamRangeMock\"\nimport { BeamHTMLElementMock } from \"./BeamHTMLElementMock\"\n\nexport const BeamDocumentMockDefaults = {\n  body: {\n    styleData: {\n      style: {\n        zoom: \"1\"\n      }\n    },\n    scrollData: {\n      scrollWidth: 800,\n      scrollHeight: 0,\n      offsetWidth: 800,\n      offsetHeight: 0,\n      clientWidth: 800,\n      clientHeight: 0\n    }\n  },\n  documentElement: {\n    scrollWidth: 800,\n    scrollHeight: 0,\n    offsetWidth: 800,\n    offsetHeight: 0,\n    clientWidth: 800,\n    clientHeight: 0\n  }\n}\n\nexport class BeamTreeWalker implements TreeWalker {\n  currentNode: Node\n  filter: NodeFilter\n  root: Node\n  whatToShow: number\n  constructor(root, whatToShow, filter ) {\n    this.root = root\n    this.currentNode = root\n    this.whatToShow = whatToShow\n    this.filter = filter\n  }\n  firstChild(): Node {\n    return this.currentNode.firstChild\n  }\n  lastChild(): Node {\n    return this.currentNode.lastChild\n  }\n  nextNode(): Node {\n    return this.currentNode.nextSibling\n  }\n  nextSibling(): Node {\n    return this.currentNode.nextSibling\n  }\n  parentNode(): Node {\n    return this.currentNode.parentNode\n  }\n  previousNode(): Node {\n    return this.currentNode.previousSibling\n  }\n  previousSibling(): Node {\n    return this.currentNode.previousSibling\n  }\n\n}\n\nexport class BeamDocumentMock extends BeamNodeMock implements BeamDocument {\n  /**\n   * @type {HTMLHtmlElement}\n   */\n  documentElement: BeamHTMLElement = new BeamHTMLElementMock(\"div\", {})\n\n  activeElement: BeamHTMLElement\n\n  /**\n   * @type BeamBody\n   */\n  body\n\n  private selection: BeamSelection\n\n  constructor(attributes = {}) {\n    super(\"#document\", BeamNodeType.document)\n    this.body = {}\n    this.selection = new BeamSelectionMock(\"div\")\n    this.childNodes = [new BeamNodeMock(\"#text\", 3)]\n    Object.assign(this, attributes)\n  }\n  createTreeWalker(root: BeamNode, whatToShow?: number, filter?: NodeFilter, _expandEntityReferences?: boolean): TreeWalker {\n    return new BeamTreeWalker(root, whatToShow, filter)\n  }\n  createTextNode(data: string): Text {\n    throw new Error(\"Method not implemented.\")\n  }\n  muted?: boolean\n  paused?: boolean\n  webkitSetPresentationMode(BeamWebkitPresentationMode: any) {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  createDocumentFragment() {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  elementFromPoint(x: any, y: any) {\n    return this.documentElement\n  }\n\n  /**\n   * @param tag {string}\n   */\n  createElement(tag) {\n    return new BeamElementMock(tag)\n  }\n\n  /**\n   *\n   * @param eventName {String}\n   * @param cb {Function}\n   */\n  addEventListener(eventName, cb) {\n    // TODO: Shouldn't we implement it?\n  }\n\n  /**\n   * @return {BeamSelection}\n   */\n  getSelection() {\n    return this.selection\n  }\n\n  /**\n   * @param selector {string}\n   * @return {HTMLElement[]}\n   */\n  querySelectorAll(selector): BeamNode[] {\n    return [] // Override it in your custom mock\n  }\n\n  createRange(): BeamRange {\n    return new BeamRangeMock()\n  }\n\n  /**\n   * @param selector {string}\n   * @return {HTMLElement[]}\n   */\n  querySelector(selector): BeamNode {\n    return\n  }\n}\n"]}