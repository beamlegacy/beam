{"version":3,"file":"BeamElementMock.js","sourceRoot":"","sources":["../../src/BeamElementMock.ts"],"names":[],"mappings":"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","sourcesContent":["import {BeamNodeMock} from \"./BeamNodeMock\"\nimport {BeamElement, BeamElementCSSInlineStyle, BeamNode, BeamNodeType, BeamNamedNodeMap, BeamHTMLCollection, BeamDOMRectList} from \"@beam/native-beamtypes\"\nimport {PointAndShootHelper} from \"@beam/native-utils\"\nimport {BeamDOMRectMock} from \"./BeamDOMRectMock\"\n\nexport class BeamElementMock extends BeamNodeMock implements BeamElement, BeamElementCSSInlineStyle {\n  style: CSSStyleDeclaration\n  attributes: NamedNodeMap\n  classList: DOMTokenList\n  clientLeft = 0\n  clientTop = 0\n  offsetLeft = 0\n  offsetTop = 0\n  offsetParent: BeamElement\n  scrollLeft = 0\n  scrollTop = 0\n  href: string\n  scrollHeight: number\n  scrollWidth: number\n  focus() {\n    // todo\n  }\n\n  _height = 0\n  _width = 0\n  querySelectorResult = {}\n\n  constructor(readonly tagName: string, attributes: NamedNodeMap = new BeamNamedNodeMap(), props = {}) {\n    super(tagName, BeamNodeType.element)\n    this.attributes = attributes\n  }\n\n  setQuerySelectorResult(query: string, element: BeamElementMock) {\n    // if no array exists yet, create one\n    if (!this.querySelectorResult[query]) {\n      this.querySelectorResult[query] = []\n    }\n    this.querySelectorResult[query].push(element)\n  }\n  cloneNode(): BeamElement {\n    return Object.assign({}, this)\n  }\n  querySelectorAll(query: string): BeamElementMock[] {\n    if (query == \"*\") {\n      const arrays = Object.values(this.querySelectorResult) || []\n      return [].concat(...arrays)\n    }\n\n    return this.querySelectorResult[query] || []\n  }\n\n  removeAttribute(pointDatasetKey: any) {\n    delete this.attributes[pointDatasetKey]\n  }\n\n  setAttribute(qualifiedName: string, value: string): void {\n    const attr = document.createAttribute(qualifiedName)\n    attr.value = value\n    this.attributes.setNamedItem(attr)\n  }\n\n  getAttribute(qualifiedName: string): string {\n    const item = this.attributes.getNamedItem(qualifiedName)\n    return item?.value\n  }\n\n  dataset: any\n\n  set width(value: number) {\n    this._width = value\n    this.scrollWidth = value\n  }\n\n  get width(): number {\n    return this._width\n  }\n\n  get height(): number {\n    return this._height\n  }\n\n  set height(value: number) {\n    this._height = value\n    this.scrollHeight = value\n  }\n\n  appendChild(node: BeamNode): BeamNode {\n    const added = super.appendChild(node)\n    if (node instanceof BeamElementMock) {\n      (node as BeamElementMock).offsetParent = this\n    }\n    return added\n  }\n\n  private get _children(): BeamElement[] {\n    return this.childNodes.filter((e) => e.nodeType === BeamNodeMock.ELEMENT_NODE) as BeamElement[]\n  }\n\n  get children(): BeamHTMLCollection {\n    const beamNodes = this._children\n    return new BeamHTMLCollection(beamNodes)\n  }\n\n  get innerHTML(): string {\n    return this.childNodes.map((c) => c.toString()).join(\"\")\n  }\n\n  get outerHTML(): string {\n    const tag = this.nodeName\n    let attributes = \"\"\n    for (const a of Array.from(this.attributes)) {\n      attributes += ` ${a.name}=\"${a.value}\"`\n    }\n    return `<${tag}${attributes}>${this.innerHTML}</${tag}>`\n  }\n\n  toString() {\n    return this.outerHTML\n  }\n\n  getBoundingClientRect(): DOMRect {\n    const xy = PointAndShootHelper.getTopLeft(this)\n    return new BeamDOMRectMock(xy.x, xy.y, this.width, this.height)\n  }\n\n  getClientRects(): DOMRectList {\n    const list = this._children.map((c) => c.getBoundingClientRect())\n    return new BeamDOMRectList(list)\n  }\n}\n"]}