{"version":3,"file":"BeamSelectionMock.js","sourceRoot":"","sources":["../../src/BeamSelectionMock.ts"],"names":[],"mappings":";;;AACA,uDAAiD;AAEjD,MAAa,iBAAiB;IAC5B,YAAY,QAAgB,EAAE,UAAU,GAAG,EAAE;QAU7C,eAAU,GAAG,CAAC,CAAA;QAGN,cAAS,GAAgB,EAAE,CAAA;QAZjC,IAAI,CAAC,UAAU,GAAG,IAAI,iCAAe,CAAC,QAAQ,CAAC,CAAA;QAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,iCAAe,CAAC,QAAQ,CAAC,CAAA;IAChD,CAAC;IAYD,QAAQ,CAAC,KAAgB;QACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,cAAc,CAAA;QACtC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,YAAY,CAAA;QACnC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC1B,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED,QAAQ,CAAC,IAAc,EAAE,MAAe;QACtC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,aAAa;QACX,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,eAAe;QACb,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,YAAY,CAAC,IAAc,EAAE,uBAAiC;QAC5D,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,kBAAkB;QAChB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,KAAK;QACH,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,MAAM,CAAC,IAAc,EAAE,MAAe;QACpC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,UAAU,CAAC,KAAa;QACtB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;IAC9B,CAAC;IAED,eAAe;QACb,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,WAAW,CAAC,KAAgB;QAC1B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,iBAAiB,CAAC,IAAc;QAC9B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,gBAAgB,CAAC,UAAoB,EAAE,YAAoB,EAAE,SAAmB,EAAE,WAAmB;QACnG,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,WAAW,CAAC,IAAc,EAAE,MAAe;QACzC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC5C,CAAC;IAED,QAAQ;QACN,OAAO,EAAE,CAAA;IACX,CAAC;CACF;AA9ED,8CA8EC","sourcesContent":["import {BeamNode, BeamRange, BeamSelection} from \"@beam/native-beamtypes\"\nimport {BeamElementMock} from \"./BeamElementMock\"\n\nexport class BeamSelectionMock implements BeamSelection {\n  constructor(nodeName: string, attributes = {}) {\n    this.anchorNode = new BeamElementMock(nodeName)\n    this.focusNode = new BeamElementMock(nodeName)\n  }\n\n  anchorNode: BeamNode\n  focusNode: BeamNode\n  anchorOffset: 0\n  focusOffset: 0\n  isCollapsed: false\n  rangeCount = 0\n  type: \"Range\"\n  caretBidiLevel: 0\n  private rangelist: BeamRange[] = []\n\n  addRange(range: BeamRange): void {\n    this.anchorNode = range.startContainer\n    this.focusNode = range.endContainer\n    this.rangelist.push(range)\n    this.rangeCount++\n  }\n\n  collapse(node: BeamNode, offset?: number): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  collapseToEnd(): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  collapseToStart(): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  containsNode(node: BeamNode, allowPartialContainment?: boolean): boolean {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  deleteFromDocument(): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  empty(): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  extend(node: BeamNode, offset?: number): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  getRangeAt(index: number): BeamRange {\n    return this.rangelist[index]\n  }\n\n  removeAllRanges(): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  removeRange(range: BeamRange): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  selectAllChildren(node: BeamNode): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  setBaseAndExtent(anchorNode: BeamNode, anchorOffset: number, focusNode: BeamNode, focusOffset: number): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  setPosition(node: BeamNode, offset?: number): void {\n    throw new Error(\"Method not implemented.\")\n  }\n\n  toString(): string {\n    return \"\"\n  }\n}\n"]}