{"version":3,"file":"BeamEventTargetMock.js","sourceRoot":"","sources":["../../src/BeamEventTargetMock.ts"],"names":[],"mappings":";;;AAEA,MAAa,mBAAmB;IAAhC;QACW,mBAAc,GAAG,EAAE,CAAA;IAiC9B,CAAC;IA/BC,gBAAgB,CAAC,IAAI,EAAE,QAAQ;QAC7B,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;YAClC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA;SAC/B;QACD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IAC1C,CAAC;IAED,mBAAmB,CAAC,IAAI,EAAE,QAAQ;QAChC,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;YAClC,OAAM;SACP;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC5C,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;gBACzB,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBAClB,OAAM;aACP;SACF;IACH,CAAC;IAED,aAAa,CAAC,KAAgB;QAC5B,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;YACxC,OAAO,IAAI,CAAA;SACZ;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAA;QAErD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC5C,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;SAC3B;QACD,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAA;IAChC,CAAC;CACF;AAlCD,kDAkCC","sourcesContent":["import {BeamEvent, BeamEventTarget} from \"@beam/native-beamtypes\"\n\nexport class BeamEventTargetMock implements BeamEventTarget {\n  readonly eventListeners = {}\n\n  addEventListener(type, callback) {\n    if (!(type in this.eventListeners)) {\n      this.eventListeners[type] = []\n    }\n    this.eventListeners[type].push(callback)\n  }\n\n  removeEventListener(type, callback) {\n    if (!(type in this.eventListeners)) {\n      return\n    }\n    const stack = this.eventListeners[type]\n    for (let i = 0, l = stack.length; i < l; i++) {\n      if (stack[i] === callback) {\n        stack.splice(i, 1)\n        return\n      }\n    }\n  }\n\n  dispatchEvent(event: BeamEvent) {\n    if (!(event.type in this.eventListeners)) {\n      return true\n    }\n    const stack = this.eventListeners[event.type].slice()\n\n    for (let i = 0, l = stack.length; i < l; i++) {\n      stack[i].call(this, event)\n    }\n    return !event.defaultPrevented\n  }\n}\n"]}