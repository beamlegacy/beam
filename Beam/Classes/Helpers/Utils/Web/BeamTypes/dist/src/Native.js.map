{"version":3,"file":"Native.js","sourceRoot":"","sources":["../../src/Native.ts"],"names":[],"mappings":";;;AAEA,MAAa,MAAM;IAqBjB;;OAEG;IACH,YAAY,GAAkB,EAAE,eAAuB;QACrD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAA;QAC7B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAA;QACtC,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,eAAoB,CAAA;QACpE,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,MAAM,KAAK,CAAC,wCAAwC,CAAC,CAAA;SACtD;IACH,CAAC;IArBD;;OAEG;IACH,MAAM,CAAC,WAAW,CAAI,GAAkB,EAAE,eAAuB;QAC/D,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACpB,MAAM,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAI,GAAG,EAAE,eAAe,CAAC,CAAA;SACtD;QACD,OAAO,MAAM,CAAC,QAAQ,CAAA;IACxB,CAAC;IAeD;;;;;;;OAOG;IACH,WAAW,CAAC,IAAY,EAAE,OAAuB;QAC/C,MAAM,UAAU,GAAG,GAAG,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE,CAAA;QACpD,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAA;QACvD,IAAI,cAAc,EAAE;YAClB,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAA;YACnC,cAAc,CAAC,WAAW,iBAAE,IAAI,IAAK,OAAO,GAAG,IAAI,CAAC,CAAA;SACrD;aAAM;YACL,MAAM,KAAK,CAAC,mCAAmC,UAAU,GAAG,CAAC,CAAA;SAC9D;IACH,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAA;IAC9B,CAAC;CACF;AAxDD,wBAwDC","sourcesContent":["import {BeamWindow, MessagePayload} from \"./BeamTypes\"\n\nexport class Native<M> {\n  /**\n   * Singleton\n   */\n  static instance: Native<any>\n  win: BeamWindow<M>\n  readonly href: string\n  readonly componentPrefix: string\n\n  protected readonly messageHandlers: M\n\n  /**\n   * @param win {BeamWindow}\n   */\n  static getInstance<M>(win: BeamWindow<M>, componentPrefix: string): Native<M> {\n    if (!Native.instance) {\n      Native.instance = new Native<M>(win, componentPrefix)\n    }\n    return Native.instance\n  }\n\n  /**\n   * @param win {BeamWindow}\n   */\n  constructor(win: BeamWindow<M>, componentPrefix: string) {\n    this.win = win\n    this.href = win.location.href\n    this.componentPrefix = componentPrefix\n    this.messageHandlers = win.webkit && win.webkit.messageHandlers as M\n    if (!this.messageHandlers) {\n      throw Error(\"Could not find webkit message handlers\")\n    }\n  }\n\n  /**\n   * Message to the native part.\n   *\n   * @param name {string} Message name.\n   *        Will be converted to ${prefix}_beam_${name} before sending.\n   * @param payload {MessagePayload} The message data.\n   *        An \"href\" property will always be added as the base URI of the current frame.\n   */\n  sendMessage(name: string, payload: MessagePayload): void {\n    const messageKey = `${this.componentPrefix}_${name}`\n    const messageHandler = this.messageHandlers[messageKey]\n    if (messageHandler) {\n      const href = this.win.location.href\n      messageHandler.postMessage({href, ...payload}, href)\n    } else {\n      throw Error(`No message handler for message \"${messageKey}\"`)\n    }\n  }\n\n  toString(): string {\n    return this.constructor.name\n  }\n}\n"]}