{"version":3,"file":"BeamLogger.js","sourceRoot":"","sources":["../../src/BeamLogger.ts"],"names":[],"mappings":";;;AAAA,6DAA0F;AAE1F,MAAa,UAAU;IAIrB,YAAY,GAAe,EAAE,QAAyB;QACpD,MAAM,eAAe,GAAG,aAAa,CAAA;QACrC,IAAI,CAAC,MAAM,GAAG,IAAI,yBAAM,CAAC,GAAG,EAAE,eAAe,CAAC,CAAA;QAC9C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC1B,CAAC;IAED,GAAG,CAAC,GAAG,IAAe;QACpB,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;QACxD,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,+BAAY,CAAC,GAAG,CAAC,CAAA;IACtD,CAAC;IAED,UAAU,CAAC,GAAG,IAAe;QAC3B,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;QACxD,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,+BAAY,CAAC,OAAO,CAAC,CAAA;IAC1D,CAAC;IAED,QAAQ,CAAC,GAAG,IAAe;QACzB,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;QACxD,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,+BAAY,CAAC,KAAK,CAAC,CAAA;IACxD,CAAC;IAED,QAAQ,CAAC,GAAG,IAAe;QACzB,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAA;QACxD,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,+BAAY,CAAC,KAAK,CAAC,CAAA;IACxD,CAAC;IAEO,WAAW,CAAC,OAAe,EAAE,KAAmB;QACtD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE;YAC7B,OAAO;YACP,KAAK;YACL,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC,CAAA;IACJ,CAAC;IAEO,oBAAoB,CAAC,IAAY;QACvC,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACpD,IAAI,GAAG,CAAA;YACP,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC7B,IAAI;oBACF,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;iBAC5B;gBAAC,OAAO,KAAK,EAAE;oBACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;iBACrB;aACF;YACD,IAAI,CAAC,GAAG,EAAE;gBACR,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;aACpB;YACD,OAAO,GAAG,CAAA;QACZ,CAAC,CAAC,CAAA;QACF,OAAO,WAAW;aACf,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,0BAA0B;aAC3D,IAAI,CAAC,IAAI,CAAC,CAAA;IACf,CAAC;CACF;AAzDD,gCAyDC","sourcesContent":["import { BeamLogCategory, BeamLogLevel, BeamWindow, Native } from \"@beam/native-beamtypes\"\n\nexport class BeamLogger {\n  native: Native<any>\n  category: BeamLogCategory\n\n  constructor(win: BeamWindow, category: BeamLogCategory) {\n    const componentPrefix = \"beam_logger\"\n    this.native = new Native(win, componentPrefix)\n    this.category = category\n  }\n\n  log(...args: unknown[]): void {\n    const formattedMessage = this.convertArgsToMessage(args)\n    this.sendMessage(formattedMessage, BeamLogLevel.log)\n  }\n\n  logWarning(...args: unknown[]): void {\n    const formattedMessage = this.convertArgsToMessage(args)\n    this.sendMessage(formattedMessage, BeamLogLevel.warning)\n  }\n\n  logDebug(...args: unknown[]): void {\n    const formattedMessage = this.convertArgsToMessage(args)\n    this.sendMessage(formattedMessage, BeamLogLevel.debug)\n  }\n\n  logError(...args: unknown[]): void {\n    const formattedMessage = this.convertArgsToMessage(args)\n    this.sendMessage(formattedMessage, BeamLogLevel.error)\n  }\n\n  private sendMessage(message: string, level: BeamLogLevel): void {\n    this.native.sendMessage(\"log\", {\n      message,\n      level,\n      category: this.category\n    })\n  }\n\n  private convertArgsToMessage(args: Object): string {\n    const messageArgs = Object.values(args).map((value) => {\n      let str\n      if (typeof value === \"object\") {\n        try {\n          str = JSON.stringify(value)\n        } catch (error) {\n          console.error(error)\n        }\n      }\n      if (!str) {\n        str = String(value)\n      }\n      return str\n    })\n    return messageArgs\n      .map((v) => v.substring(0, 3000)) // Limit msg to 3000 chars\n      .join(\", \")\n  }\n}\n"]}