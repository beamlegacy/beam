# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane


default_platform(:mac)
xcode_file = "../.xcode_version"
xcversion(version: File.read(xcode_file)) if File.exists?(xcode_file)

platform :mac do
  desc "Run linting"
  lane :lint do
    swiftlint(
      mode: :lint,
      strict: true,
      config_file: '.swiftlint.yml',
      reporter: "codeclimate",
      ignore_exit_status: true,
      output_file: "fastlane/codequality_report.json"
    )
  end

  desc "Register Device"
  lane :register_local_device do
    register_device(
      name: `hostname | cut -d'.' -f1`,
      udid: `ioreg -ad2 -c IOPlatformExpertDevice | xmllint --xpath '//key[.="IOPlatformUUID"]/following-sibling::*[1]/text()' -`,
      team_id: ENV["TEAM_ID"],
      username: ENV["CERT_USERNAME"]
    )
  end

  private_lane :check_certs do |params|
    # Parameters at https://docs.fastlane.tools/actions/cert/
    get_certificates(
      development: params[:cert_development],
      force: false,
      type: params[:cert_type],
      # Don't set the filename so we can easily see which certificate is used
      # Proper one should be 697853WUNU for Fabien penso
      # You can see its value at https://developer.apple.com/account/resources/certificates/list inside the certificate url
      # filename: "developer_id.cer",
      output_path: "./certs",
      username: ENV["CERT_USERNAME"],
      team_id: ENV["TEAM_ID"],
      team_name: ENV["TEAM_NAME"],
      platform: "macos"
    )

    # Parameters at https://docs.fastlane.tools/actions/sigh/
    get_provisioning_profile(
      development: params[:profile_development],
      developer_id: params[:profile_developer_id],
      username: ENV["CERT_USERNAME"],
      app_identifier: ENV["TEAM_IDENTIFIER"],
      team_id: ENV["TEAM_ID"],
      team_name: ENV["TEAM_NAME"],
      provisioning_name: params[:profile_provision_name],
      cert_id: params[:profile_cert_id],
      cert_owner_name: ENV["CERT_OWNER_NAME"],
      skip_certificate_verification: true,
      platform: "macos",
      output_path: "./certs",
      # Actually should be .profileprovision but fastlane complains. It will
      # automatically fetch this profile, but you can just get the one from
      # working md5sum: 5c00f51fe03c198182f31980df51a219
      filename: params[:profile_filename],
      readonly: true, # Don't want to mess up mine
      # force: false,
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      path: "Beam.xcodeproj",
      team_id: ENV["TEAM_ID"],
      code_sign_identity: params[:code_sign_identity],
      profile_name: params[:profile_name],
      bundle_identifier: ENV["TEAM_IDENTIFIER"],
      targets: ["Beam"],
      build_configurations: params[:build_configurations])
  end

  desc "Build for UI Testing"
  lane :build_for_testing do

      update_app_identifier(
        xcodeproj: "Beam.xcodeproj",
        plist_path: "Beam/Configuration/Info.plist",
        app_identifier: ENV["APP_IDENTIFIER"]
      )

      check_certs(
        profile_development: true,
        cert_development: true,
        profile_provision_name: "Beam Development",
        profile_cert_id: "697853WUNU",
        profile_filename: "development.co.beamapp.macos.mobileprovision",
        code_sign_identity: "Mac Developer",
        profile_name: "Beam Development",
        build_configurations: ["Test"]
      )

      run_tests(
        workspace: "Beam.xcworkspace",
        scheme: "Beam",
        fail_build: true,
        build_for_testing: true,
        derived_data_path: "derived_data",
      )
  end

  def generate_allure_report
    Dir.chdir("..") do
        sh "xcresults export fastlane/test_output/Beam.xcresult fastlane/allure-result"
        sh "npx allure generate ./fastlane/allure-result --clean"
    end
  end

  desc "Run Unit Tests"
  lane :tests do

    update_app_identifier(
      xcodeproj: "Beam.xcodeproj",
      plist_path: "Beam/Configuration/Info.plist",
      app_identifier: ENV["APP_IDENTIFIER"]
    )

    check_certs(
      profile_development: true,
      cert_development: true,
      profile_provision_name: "Beam Development",
      profile_cert_id: "697853WUNU",
      profile_filename: "development.co.beamapp.macos.mobileprovision",
      code_sign_identity: "Mac Developer",
      profile_name: "Beam Development",
      build_configurations: ["Test"]
    )

    begin
      run_tests(
        scheme: "Beam",
        testplan: "BeamTests",
        workspace: "Beam.xcworkspace",
        output_files: "tests.xml",
        use_system_scm: true,
        result_bundle: true,
        skip_build: true,
        fail_build: true,
        # code_coverage: true,
        # derived_data_path: "derived_data",
      )
      # slather(
      #   build_directory: "derived_data",
      #   binary_basename: "Beam",
      #   scheme: "Beam",
      #   workspace: "Beam.xcworkspace",
      #   proj: "Beam.xcodeproj",
      #   cobertura_xml: true,
      #   ignore: ["Extern/*", "derived_data/SourcePackages/*"],
      #   configuration: "Debug"
      # )
      # slather(
      #   build_directory: "derived_data",
      #   binary_basename: "Beam",
      #   scheme: "Beam",
      #   workspace: "Beam.xcworkspace",
      #   proj: "Beam.xcodeproj",
      #   simple_output: true,
      #   ignore: ["Extern/*", "derived_data/SourcePackages/*"],
      #   configuration: "Debug"
      # )
    ensure
      generate_allure_report
   end
 end


  9.times do |index|
    name = "Thread#{index+1}"

    desc "Run UI tests #{name}"
    lane :"uitests#{name}" do

      update_app_identifier(
        xcodeproj: "Beam.xcodeproj",
        plist_path: "Beam/Configuration/Info.plist",
        app_identifier: ENV["APP_IDENTIFIER"]
      )

      check_certs(
        profile_development: true,
        cert_development: true,
        profile_provision_name: "Beam Development",
        profile_cert_id: "697853WUNU",
        profile_filename: "development.co.beamapp.macos.mobileprovision",
        code_sign_identity: "Mac Developer",
        profile_name: "Beam Development",
        build_configurations: ["Test"]
      )

      begin
        run_tests(
        scheme: "Beam",
        testplan: "BeamUITests-#{name}",
        workspace: "Beam.xcworkspace",
        output_types: "html,junit",
        output_files: "tests.html,tests.xml",
        result_bundle: true,
        use_system_scm: true,
        code_coverage: true,
        fail_build: true,
        test_without_building: true,
        derived_data_path: "derived_data",
        skip_package_dependencies_resolution: true,
        cloned_source_packages_path: "derived_data/SourcePackages",
        clean: false
      )
      ensure
        generate_allure_report
      end
    end
  end

  def unique_build_number
    UI.message "Get build number for branch #{Actions.git_branch}"
    timestamp = DateTime.parse(ENV["CI_COMMIT_TIMESTAMP"])
    build_number = timestamp.strftime("%Y%m%d.%H%M%S")
    UI.message "Will use build number: #{build_number}"
    build_number
  end

  def publishing_channel
    case Actions.git_branch
    when "develop"
      # Secret channel name so that curious beta users can't easily guess it and get our internal builds
      "bluepineapple"
    when /\Abeta-.*/
      "beta"
    when /\Arelease-.*/
      "release"
    else
      "review/#{Actions.git_branch}" # This is a review build
    end
  end

  def build_type
    case Actions.git_branch
    when "develop"
      "develop"
    when /\Abeta-.*/
      "beta"
    when /\Arelease-.*/
      "release"
    else
      "review"
    end
  end

  def version_name
    case Actions.git_branch
    when "develop"
      "beam develop"
    when /\Abeta-.*/
      "beam beta"
    else
      "beam"
    end
  end

  def review_build?
    ENV["CI_MERGE_REQUEST_EVENT_TYPE"] == "merge_train" || ENV["CI_PIPELINE_SOURCE"] == "merge_request_event" || publishing_channel().match(/^review\//) || (ENV['CI_ENVIRONMENT_NAME'] && ENV['CI_ENVIRONMENT_NAME'].strip.empty?)
  end

  def publish_channel_internal?
    review_build? || build_type() == "develop"
  end

  def publish_channel_external?
    !review_build? && ["beta", "release"].include?(publishing_channel())
  end

  # Unfortunately, Fastlane doesn't provided support for lightweight Git tags, so here it is
  def add_lightweight_git_tag(tag, commit)
    cmd = ['git tag']
    cmd << tag.shellescape
    cmd << commit.to_s

    UI.message("Adding git tag '#{tag}' ðŸŽ¯.")
    Actions.sh(cmd.join(' '))
  end

  ## To create DeveloperId signed builds
  lane :build do
    branch = Actions.git_branch
    
    build_number = unique_build_number()
    
    # Set build number in Info.plist
    increment_build_number(build_number: build_number)

    appcast_url = "https://s3.#{ENV["AWS_DEFAULT_REGION"]}.amazonaws.com/#{s3_bucket_for_channel(publish: true)}/#{s3_path_for_app_feed()}/AppFeed.json"

    info_plist = "Beam/Configuration/Info.plist"

    UI.message "Set AppFeed url to #{appcast_url} in #{info_plist}"

    sparkle_set_url(info_plist: info_plist,
                    appcast_url: appcast_url) 


    update_app_identifier(
      xcodeproj: "Beam.xcodeproj",
      plist_path: "Beam/Configuration/Info.plist",
      app_identifier: ENV["APP_IDENTIFIER"]
    )

    scheme = set_scheme_name_in_plist()

    check_certs(cert_development: false,
                cert_type: "developer_id_application",
                profile_filename: "developer_id.co.beamapp.macos.mobileprovision",
                profile_developer_id: true,
                profile_provision_name: ENV["PROVISION_NAME"],
                profile_cert_id: ENV["CERT_ID"],
                code_sign_identity: "Developer ID Application",
                profile_name: ENV["PROVISION_NAME"],
                build_configurations: config_name_for_scheme(scheme))

    UI.message "Branch is #{branch}"
    # unless ["HEAD", "master", "develop", "release"].include?(branch) || branch.start_with?("beta")

    #   add_badge(dark: false,
    #             grayscale: false,
    #             glob: "/Beam/Assets/Assets.xcassets/AppIcon.appiconset/*.png")
    # end

    build_mac_app(
      workspace: "Beam.xcworkspace",
      scheme: scheme,
      silent: true,
      clean: true,
      output_directory: "builds",
      output_name: "Beam",
      include_symbols: false,
      # xcargs: settings_to_override,
      # Doesn't work :(
      export_xcargs: 'OTHER_CODE_SIGN_FLAGS="--timestamp"',

      export_method: "developer-id", # Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id

      ## Doesn't work but it should :(
      #      export_options: {
      #        method: "development",
      #        provisioningProfiles: {
      #          "co.beamapp.macos" => "Beam"
      #        }
      #      }
      ## But this works
      export_options: "./ExportOptionsDeveloperId.plist",
      # Found this at https://github.com/fastlane/fastlane/issues/15963 or we have archive failed
      skip_package_pkg: true

      # export_xcargs: "-allowProvisioningUpdates"
    )

  end

  lane :notarize_build do

    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_NOTARIZE_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_NOTARIZE_API_KEY_ISSUER_ID"],
      key_content: ENV["APP_STORE_NOTARIZE_API_KEY"]
    )
    
    notarize(
      package: "builds/Beam.app",
      verbose: true,
      print_log: true,
      bundle_id: ENV["APP_IDENTIFIER"],
      asc_provider: ENV["TEAM_ID"],
      api_key: api_key
    )
  end

  lane :deploy do
    tag_build
    upload_s3
    upload_update_feed unless publish_channel_external?
    ping_slack
  end

  lane :publish do
    if review_build?
      upload_update_feed
    elsif publish_channel_external?
      tag_build(publish: true)
      # Upload the exact build
      upload_s3(publish: true, static_link: false)
      # Upload the aliased build
      upload_s3(publish: true, static_link: true)
      # Upload the auto-update feed
      upload_update_feed(publish: true) 
      ping_slack(publish: true)
    end
  end

  lane :tag_build do |params|
    get_version_number_from_plist(info_plist: "builds/Beam.app/Contents/Info.plist")
    get_build_number_from_plist(info_plist: "builds/Beam.app/Contents/Info.plist")
    publish = params[:publish] || false

    if publish
      tag = "#{lane_context[SharedValues::VERSION_NUMBER]}-#{build_type()}"
      add_lightweight_git_tag(tag, ENV["CI_COMMIT_SHA"])
      push_git_tags(tag: tag)
    else
      tag = "#{lane_context[SharedValues::BUILD_NUMBER]}-#{build_type()}"
      if !git_tag_exists(tag: tag, remote: true)
        add_lightweight_git_tag(tag, ENV["CI_COMMIT_SHA"])
        push_git_tags(tag: tag)
      end
    end
    
  end

  lane :ping_sentry do
    get_version_number_from_plist(info_plist: "builds/Beam.app/Contents/Info.plist")
    get_build_number_from_plist(info_plist: "builds/Beam.app/Contents/Info.plist")

    sentry_upload_dif(
      org_slug: "beamapp",
      project_slug: "beam-macos",
      # Takes too long
      # force_foreground: true,
      # wait: true,
      path: "builds/Beam.app.dSYM.zip"
    )

    sentry_create_release(
      org_slug: "beamapp",
      project_slug: "beam-macos",
      version: "#{lane_context[SharedValues::VERSION_NUMBER]}+#{lane_context[SharedValues::BUILD_NUMBER]}",
      app_identifier: ENV["TEAM_IDENTIFIER"],
      finalize: true
    )

    sentry_set_commits(
      version: "#{lane_context[SharedValues::VERSION_NUMBER]}+#{lane_context[SharedValues::BUILD_NUMBER]}",
      app_identifier: ENV["TEAM_IDENTIFIER"],
      auto: true, # enable completely automated commit management
      clear: false, # clear all current commits from the release
      # commit: '...', # commit spec, see `sentry-cli releases help set-commits` for more information
    )
  end

  private_lane :create_release_notes do |params|
    # Fetch commit from S3 if we already had one
    publish = params[:publish] || false

    download_previous_file(filename: "commit", channel: publishing_channel(), publish: publish)

    changelog = if File.exists?("../builds/commit")
                  last_commit = File.read("../builds/commit").chomp
                  UI.message "Previous commit file exists, using `git log HEAD...#{last_commit}`"
                  `git log HEAD...#{last_commit}`
                else
                  UI.message "No previous commit file, using `git log -1`"
                  `git log -1`
                end

    File.open("../builds/release_notes.html", "wb") do |f|
      f.write("<html><body><pre>#{changelog}</pre></body></html>")
    end
    
    File.open("../builds/release_notes.md", "wb") do |f|
      f.write("#{changelog}")
    end

    # Store this commit
    File.open("../builds/commit", "wb") do |f|
      current_commit = `git rev-parse HEAD`.chomp
      UI.message "Storing current commit #{current_commit} for next release notes"
      f.write(current_commit)
    end
  end

  lane :upload_s3 do |params|
    # We want the build number from `builds/Beam.app/Contents/Info.plist`
    get_version_number_from_plist(info_plist: "builds/Beam.app/Contents/Info.plist")
    get_build_number_from_plist(info_plist: "builds/Beam.app/Contents/Info.plist")
    
    publish = params[:publish] || false
    static_link = params[:static_link] || false

    files = [
      "builds/Beam.dmg",
      "builds/Beam.zip",
    ]
    # Don't export the symbols to the production bucket, keep a copy on our dev bucket
    unless publish && publish_channel_external?
      files << "builds/Beam.app.dSYM.zip"
    end

    if publish_channel_internal?
      create_release_notes(channel: publishing_channel())
      # These are not used for external builds
      files += [
        "builds/release_notes.html",
        "builds/commit"
      ]
    end

    # This should be first upload, or Slack links will be wrong
    aws_s3(
      access_key: ENV["AWS_ACCESS_KEY_ID"],
      secret_access_key: ENV["AWS_SECRET_ACCESS_KEY"],
      bucket: s3_bucket_for_channel(publish: publish),
      region: ENV["AWS_DEFAULT_REGION"],
      upload_metadata: true,
      files: files,
      path: s3_path_for_build(static_link: static_link)
    )

    # We store our own uploaded artifacts to advertise them on Slack
    lane_context[:BEAM_UPLOADED_FILES] = lane_context[SharedValues::S3_FILES_OUTPUT_PATHS].dup

    lane_context[SharedValues::S3_FILES_OUTPUT_PATHS].each do |file|
      UI.success "S3: #{file}"
    end
  end

  private_lane :upload_update_feed do |params|
    # I have to do Sparkle at the same time, as `increment_build_number`
    # modifies Beam/Configuration/Info.plist but this file is not propagated to
    # other CI jobs
    publish = params[:publish] || false

    generate_update_feed(publish: publish)

    s3_path = s3_path_for_app_feed()

    aws_s3(
      access_key: ENV["AWS_ACCESS_KEY_ID"],
      secret_access_key: ENV["AWS_SECRET_ACCESS_KEY"],
      bucket: s3_bucket_for_channel(publish: publish),
      region: ENV["AWS_DEFAULT_REGION"],
      upload_metadata: true,
      files: [
        "builds/AppFeed.json"
      ],
      path: s3_path
    )

    lane_context[SharedValues::S3_FILES_OUTPUT_PATHS].each do |file|
      UI.success "S3: #{file}"
    end
  end

  def s3_bucket_for_channel(publish: true)
    if publish && publish_channel_external?
      ENV["S3_PROD_BUCKET"]
    else
      ENV["S3_BUCKET"]
    end
  end

  def s3_path_for_build(static_link: false)
    if static_link
      # URLs that can easily be linked to (such as on a public website)
      if review_build?
        raise "Unsupported action"
      else
        publishing_channel()
      end
    else
      if review_build?
        ENV['CI_ENVIRONMENT_NAME'] || "review/#{Actions.git_branch}"
      else
        # By default we upload to a version & build number dependent path for precise targeting
        "#{publishing_channel()}/#{lane_context[SharedValues::VERSION_NUMBER]}/#{lane_context[SharedValues::BUILD_NUMBER]}"
      end
    end
  end

  def s3_path_for_app_feed
    if review_build?
      ENV['CI_ENVIRONMENT_NAME'] || "review/#{Actions.git_branch}"
    else
      publishing_channel()
    end
  end

  private_lane :download_previous_file do |params|
    filename = params[:filename]
    default_file = params[:default_file]
    s3_path = params[:channel]
    publish = params[:publish] || false
    s3_bucket = s3_bucket_for_channel(publish: publish)

    s3_client = Aws::S3::Client.new(region: ENV["AWS_DEFAULT_REGION"],
                                   access_key_id: ENV["AWS_ACCESS_KEY_ID"],
                                   secret_access_key: ENV["AWS_SECRET_ACCESS_KEY"])

    s3_client.get_object(
      response_target: "../builds/#{filename}",
      bucket: s3_bucket,
      key: "#{s3_path}/#{filename}"
    )
    UI.success "S3: Fetched https://s3.#{ENV['AWS_DEFAULT_REGION']}.amazonaws.com/#{s3_bucket}/#{s3_path}/#{filename}"
  rescue Aws::S3::Errors::NoSuchKey => e
    UI.message "S3: https://s3.#{ENV['AWS_DEFAULT_REGION']}.amazonaws.com/#{s3_bucket}/#{s3_path}/#{filename} does not exist"
    if default_file
      FileUtils.cp(default_file, "../builds/#{filename}")
    end
  rescue
    UI.error "S3: Error fetching #{s3_path}/#{filename}: #{$!}"
    raise $!
  end

  private_lane :generate_update_feed do |params|
    get_version_number_from_plist(info_plist: "builds/Beam.app/Contents/Info.plist")
    get_build_number_from_plist(info_plist: "builds/Beam.app/Contents/Info.plist")

    publish = params[:publish] || false
    
    # We store resources at different locations depending on branches (i.e. for develop/release we use version-specific folders, for others the root) 
    resources_path = s3_path_for_build()

    root_directory = "https://s3.#{ENV['AWS_DEFAULT_REGION']}.amazonaws.com/#{s3_bucket_for_channel(publish: publish)}"
    resources_directory = "#{root_directory}/#{resources_path}"
    app_download_url = "#{resources_directory}/Beam.zip"
    # The feed is always at the root of the channel folder in s3
    update_json_url = "#{root_directory}/#{s3_path_for_app_feed()}/AppFeed.json"
    release_notes_html_url = if publish_channel_external?
      ENV["PUBLIC_BUILD_RELEASE_NOTES_URL"]
    else
      "#{resources_directory}/release_notes.html"
    end
    human_version = "#{lane_context[SharedValues::VERSION_NUMBER]}"
    machine_version = "#{lane_context[SharedValues::BUILD_NUMBER]}"
    release_title = "#{version_name}"
        
    rootFolder = Dir.chdir("..") { Dir.pwd } 
    UI.success "#{rootFolder}"
    
    appFeedBuilder = "../Extern/AutoUpdate/AppFeedBuilder"

    build = "cd #{appFeedBuilder} && swift build"
    
    UI.success "#{build}"
    outputBuild = Actions.sh(build)
    UI.success "#{outputBuild}"
      
    run = ["cd #{appFeedBuilder} &&",
      "swift run AppFeedBuilder", update_json_url, "'#{release_title}'", human_version, "'#{machine_version}'", app_download_url, 
      "--output-path", "#{rootFolder}/builds", 
      "--release-notes-url", release_notes_html_url].join(' ')
    
    UI.success "#{run}"
    output = Actions.sh(run)
    UI.success "#{output}"

    UI.success "AutoUpdate: Successfully added a release item to the AppFeed JSON file"
    UI.success "AutoUpdate: Added #{human_version} #{machine_version} at #{app_download_url}"
  end

  private_lane :ping_slack do |params|
    next if review_build?

    publish = params[:publish] || false

    version = lane_context[SharedValues::VERSION_NUMBER]
    build_number = lane_context[SharedValues::BUILD_NUMBER]
    build_type = "#{build_type()} "
    build_type += "candidate " unless publish_channel_internal? || publish

    attachments = [
      {
        title: "Git Pipeline",
        value: ENV["CI_PIPELINE_URL"],
        short: false
      }
    ]
    
    attachments += lane_context[:BEAM_UPLOADED_FILES].map do |file|
      {
        title: file.split("/").last,
        value: file,
        short: false
      }
    end
    message = if publish
      ":package: Beam MacOS #{build_type}#{version} (#{build_number}) has shipped!"
    else
      ":zap: Beam MacOS #{build_type}#{version} (#{build_number}) is available!"
    end

    slack(
      use_webhook_configured_username_and_icon: true,
      message: message,
      channel: (publish_channel_internal? ? "#builds-mac" : "#builds-mac-beta"),
      success: true,
      default_payloads: [:git_branch, :last_git_commit], # :test_result
      payload: {

      },
      attachment_properties: {
        fields: attachments,
      },
      slack_url: (publish_channel_internal? ? ENV["SLACK_WEBHOOK_BUILDS_MAC_URL"] : ENV["SLACK_WEBHOOK_BUILDS_MAC_BETA_URL"])
    )
  end

  lane :delete_s3 do |params|
    get_version_number_from_plist(info_plist: "builds/Beam.app/Contents/Info.plist")
    get_build_number_from_plist(info_plist: "builds/Beam.app/Contents/Info.plist")

    if review_build?
      s3 = Aws::S3::Resource.new(region: ENV["AWS_DEFAULT_REGION"],
                                 credentials: Aws::Credentials.new(ENV["AWS_ACCESS_KEY_ID"],
                                                                   ENV["AWS_SECRET_ACCESS_KEY"]))

      s3_bucket = s3_bucket_for_channel()
      directory = s3_path_for_build()
      bucket = s3.bucket(s3_bucket)
      UI.message "S3: deleting #{s3_bucket}/#{directory}"
      bucket.objects(prefix: directory).batch_delete!
      UI.success "S3: Removed #{s3_bucket}/#{directory}"
    end
  end

  def set_scheme_name_in_plist
    scheme = if Actions.git_branch.start_with?("beta")
      "Beam beta release"
    else
      "Beam release"
    end

    set_info_plist_value(path: "Beam/Configuration/Info.plist", key: "SchemeName", value: scheme)

    scheme
  end

  def config_name_for_scheme(scheme_name)
    mapping = {"Beam beta release" => "BetaRelease"}
    mapping[scheme_name] || "Release"
  end

end
