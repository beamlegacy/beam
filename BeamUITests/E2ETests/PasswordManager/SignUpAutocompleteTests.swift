//
//  SignUpAutocomplete.swift
//  BeamUITests
//
//  Created by Andrii on 28/09/2021.
//

import Foundation
import XCTest

class SignUpAutocompleteTests: BaseTest {
    
    //Temp
    //let wikiSignUpPage = "https://en.wikipedia.org/w/index.php?title=Special:CreateAccount&returnto=Main+Page "
    let wikiSignUpPage = "https://en.wikipedia.org "
    func testUseAutogeneratedPassword() throws {
        try XCTSkipIf(true, "To be refactored once https://linear.app/beamapp/issue/BE-1563/create-uitest-menu-option-having-httpsmockloginimoofcom-integration is Done")
        let placeholderField1 = "Enter a password"
        let placeholderField2 = "Enter password again"
        let helper = PasswordManagerHelper()
        let journalView = launchApp()
        BeamUITestsHelper(journalView.app).tapCommand(.resizeSquare1000)
        let webView = journalView.searchInOmniBox(wikiSignUpPage, true)
        XCTAssertTrue(handleWebsiteIsNotOpened(webView), "Google page is still opened")
        webView.staticText("Create account").tapInTheMiddle()
        _ = webView.secureTextField(placeholderField1).waitForExistence(timeout: implicitWaitTimeout)
        let passwordSecuredField1 = webView.secureTextField(placeholderField1)
        let passwordSecuredField2 = webView.secureTextField(placeholderField2)
        
        let passwordField1 = webView.textField(placeholderField1)
        let passwordField2 = webView.textField(placeholderField2)

        XCTAssertEqual(passwordSecuredField1.value as? String, placeholderField1)
        XCTAssertEqual(passwordSecuredField2.value as? String, placeholderField2)
        testRailPrint("When I click on password filed")
        passwordSecuredField1.click()
        testRailPrint("Then I see Autogenerated Password Popup")              
        XCTAssertTrue(helper.doesAutogeneratedPasswordPopupExist())
        XCTAssertTrue(helper.getAutogeneratedPasswordPopupIcon().exists)
        
        let fieldValue1 = webView.getElementStringValue(element: passwordField1)
        let fieldValue2 = webView.getElementStringValue(element: passwordField1)
        testRailPrint("Then the password fields are autofilled")
        XCTAssertTrue(fieldValue1.count > 0 && fieldValue1 != placeholderField1)
        XCTAssertTrue(fieldValue2.count > 0 && fieldValue2 != placeholderField2)
        XCTAssertEqual(fieldValue1, fieldValue2)
        
        testRailPrint("When I click Use autogenerated password option")
        helper.useAutogeneratedPassword()
        testRailPrint("Then password fields are still autofilled and Autogenerated Password Popup is closed")
        XCTAssertEqual(passwordField1.value as? String, fieldValue1)
        XCTAssertEqual(passwordField2.value as? String, fieldValue2)
        XCTAssertFalse(helper.doesAutogeneratedPasswordPopupExist())
    }
    
    func handleWebsiteIsNotOpened(_ webView: WebTestView) -> Bool {
        let facebookWebsiteLinkTitle = webView.staticText("Wikipedia, the free encyclopedia")
        if facebookWebsiteLinkTitle.waitForExistence(timeout: minimumWaitTimeout) {
            facebookWebsiteLinkTitle.tapInTheMiddle()
        }
        return WaitHelper().waitForDoesntExist(webView.image("Google"))
    }
    
}
